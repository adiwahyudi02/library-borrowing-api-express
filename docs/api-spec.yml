openapi: 3.1.0
info:
  title: Simple Library Borrowing System - Guards API
  version: 1.0.0
  description: API for managing guards (librarians) who can manage books, members, and borrowings.

servers:
  - url: http://localhost:3000/api

tags:
  - name: Guards
    description: Endpoints related to guards (librarians)
  - name: Books
    description: Endpoints for managing books
  - name: Members
    description: Endpoints for managing members

paths:
  /guards/register:
    post:
      tags:
        - Guards
      summary: Register new guard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterGuardRequest"
      responses:
        "201":
          description: Guard created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataGuardResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /guards/login:
    post:
      tags:
        - Guards
      summary: Login guard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginGuardRequest"
      responses:
        "200":
          description: Login successful, return access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataLoginResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /guards/me:
    get:
      tags:
        - Guards
      summary: Get current logged-in guard
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Guard profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataGuardResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags:
        - Guards
      summary: Update current guard profile
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGuardRequest"
      responses:
        "200":
          description: Updated guard data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataGuardResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /guards/logout:
    delete:
      tags:
        - Guards
      summary: Logout guard
      security:
        - ApiKeyAuth: []
      responses:
        "204":
          description: Logout successful (no content)
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /books:
    post:
      tags:
        - Books
      summary: Create new book
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBookRequest"
      responses:
        "201":
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataBookResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Books
      summary: List all books
      parameters:
        - name: title
          in: query
          description: Filter by book title (optional)
          required: false
          schema:
            type: string
        - name: author
          in: query
          description: Filter by author name (optional)
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/SizeParam"
      responses:
        "200":
          description: List of books
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataBooksResponse"

  /books/{bookId}:
    get:
      tags:
        - Books
      summary: Get a book by ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Book detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataBookResponse"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags:
        - Books
      summary: Update a book by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookRequest"
      responses:
        "200":
          description: Updated book data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataBookResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Books
      summary: Delete a book by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Book deleted successfully (no content)
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /members:
    post:
      tags:
        - Members
      summary: Create new member
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMemberRequest"
      responses:
        "201":
          description: Member created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataMemberResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Members
      summary: List all members
      security:
        - ApiKeyAuth: []
      parameters:
        - name: name
          in: query
          description: Filter by name (optional)
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: Filter by email (optional)
          required: false
          schema:
            type: string
        - name: phone
          in: query
          description: Filter by phone (optional)
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/SizeParam"
      responses:
        "200":
          description: List of members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataMembersResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /members/{memberId}:
    get:
      tags:
        - Members
      summary: Get a member by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/MemberIdParam"
      responses:
        "200":
          description: Member details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataMemberResponse"
        "404":
          description: Member not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags:
        - Members
      summary: Update a member by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/MemberIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMemberRequest"
      responses:
        "200":
          description: Updated member data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataMemberResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Member not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Members
      summary: Delete a member by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/MemberIdParam"
      responses:
        "204":
          description: Member deleted successfully (no content)
        "404":
          description: Member not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-token

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number
      required: true
      schema:
        type: integer
        example: 1
    SizeParam:
      name: size
      in: query
      description: Number of items per page
      required: true
      schema:
        type: integer
        example: 10

    MemberIdParam:
      name: memberId
      in: path
      required: true
      schema:
        type: integer
      description: ID of the member

  schemas:
    # Success wrappers
    DataGuardResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/GuardResponse"

    DataLoginResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/LoginResponse"

    # Error response
    ErrorResponse:
      type: object
      properties:
        errors:
          type: string
          example: "Invalid request payload"

    # Pagging response
    Paging:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        total_page:
          type: integer
          example: 2
        size_page:
          type: integer
          example: 5
        total_items:
          type: integer
          example: 10

    # Request payloads
    RegisterGuardRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "strongpassword123"

    LoginGuardRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "strongpassword123"

    UpdateGuardRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Updated"
        password:
          type: string
          format: password
          example: "newpassword123"

    # Response payloads
    GuardResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"

    LoginResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        access_token:
          type: string
          example: "example-api-key-123456"

    CreateBookRequest:
      type: object
      required:
        - title
        - author
        - stock
      properties:
        title:
          type: string
          example: "Clean Code"
        author:
          type: string
          example: "Robert C. Martin"
        stock:
          type: integer
          example: 10

    UpdateBookRequest:
      type: object
      properties:
        title:
          type: string
          example: "Clean Code Updated"
        author:
          type: string
          example: "Robert Martin"
        stock:
          type: integer
          example: 12

    # Response payloads
    BookResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Clean Code"
        author:
          type: string
          example: "Robert C. Martin"
        stock:
          type: integer
          example: 10

    # Success wrappers
    DataBookResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/BookResponse"

    DataBooksResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BookResponse"
        pagging:
          $ref: "#/components/schemas/Paging"

    CreateMemberRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: "Alice Smith"
        email:
          type: string
          format: email
          example: "alice@example.com"
        phone:
          type: string
          example: "+62123456789"

    UpdateMemberRequest:
      type: object
      properties:
        name:
          type: string
          example: "Alice Updated"
        email:
          type: string
          format: email
          example: "alice.new@example.com"
        phone:
          type: string
          example: "+62876543210"

    # Responses
    MemberResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Alice Smith"
        email:
          type: string
          format: email
          example: "alice@example.com"
        phone:
          type: string
          example: "+62123456789"

    DataMemberResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/MemberResponse"

    DataMembersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MemberResponse"
        pagging:
          $ref: "#/components/schemas/Paging"
